module Get where

import Data.Char
import Data.List hiding (find)

import Data
import Helper
import Find

evalGet :: Format -> [String] -> IO (Result String)
evalGet format (keyword:topics) = do
      
  blocks <- find topics
      
  errorIfThereAreNoBlocks blocks topics
      
  let 
        
    text = case format of
      _ -> latexText
        
    latexText = intercalate "" $ map showBlocks blocks
        
    showBlocks (ts,idsAndCont) =
      case idsAndCont of
            
        []  -> ""
            
        ics -> "{ section " 
               ++ topics2text ts
               ++ showICs ics
               ++ "}"
                  
    topics2text   [] = error "[]??"
    topics2text tops = intercalate ", " tops
        
    showICs = intercalate "" . map ic2string
                  
    ic2string (id,c) =
      "{ subsection " ++ show id ++ "\n\n" ++ c ++ "}"
        
    keyword' = map toLower keyword
        
  case keyword' of
        
    "show" -> return (Result text)
        
    x      -> error $ "wtf is " ++ x ++ " ???"
        
evalGetAll :: Format -> [String] -> IO (Result String)
evalGetAll format (keyword:topics) = do
      
  blocks <- findAll topics
      
  errorIfThereAreNoBlocks blocks topics

  let 
        
    text = case format of
      _ -> latexText
          
    latexText = intercalate "\n\n" $ map showBlocks blocks
        
    showBlocks (ts,idsAndCont) =
      case idsAndCont of
        []  -> ""
        ics -> "{ section " 
               ++ topics2text ts
               ++ showICs ics
               ++ "}"

    showICs = intercalate "" . map ic2string
                
    ic2string (id,cont) = 
      "{ subsection " ++ show id ++ "\n\n" ++ cont ++ "}"
        
    topics2text   [] = error "[]??"
    topics2text tops = intercalate ", " tops
        
    keyword' = map toLower keyword
        
  case keyword' of
        
    "show" -> return (Result text)
        
    x      -> error $ "wtf is " ++ x ++ " ???"
                
evalGetID :: Format -> [String] -> IO (Result String)
evalGetID format (keyword:ids) = do
          
  blocks <- findID (map read ids)
      
  errorIfThereAreNoBlocks blocks (map show ids)
      
  let 
        
    text = case format of
      _ -> latexText blocks
          
    latexText = intercalate "\n\n" . map showBlocks
    --latexText = concat . map showBlocks
        
    showBlocks (topics,id,cont) =
          
      "{ section " 
      ++ topics2text topics ++ "" --"\n\n"
      ++ "{ subsection " ++ show id ++ "\n\n" ++ cont ++ "}}"
          
    topics2text   [] = error "[]??"
    topics2text tops = intercalate ", " tops
        
    keyword' = map toLower keyword
        
  case keyword' of
        
    "show" -> return (Result text)
        
    x      -> error $ "wtf is " ++ x ++ " ???"
